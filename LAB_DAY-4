{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 1.import math\par
\par
def euclidean_distance(p1, p2):\par
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\par
\par
def closest_pair_brute_force(points):\par
    min_distance = float('inf')\par
    closest_pair = None\par
    n = len(points)\par
    for i in range(n):\par
        for j in range(i + 1, n):\par
            distance = euclidean_distance(points[i], points[j])\par
            if distance < min_distance:\par
                min_distance = distance\par
                closest_pair = (points[i], points[j])\par
    return closest_pair, min_distance\par
\par
# Input\par
points = [(1, 2), (4, 5), (7, 8), (3, 1)]\par
closest_pair, min_distance = closest_pair_brute_force(points)\par
\par
# Output\par
print("Closest pair:", closest_pair)\par
print("Minimum distance:", min_distance)\par
output:\par
Closest pair: ((1, 2), (3, 1))\par
Minimum distance: 1.4142135623730951\par
\par
2.def orientation(p, q, r):\par
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\par
    if val == 0:\par
        return 0  # Collinear\par
    return 1 if val > 0 else 2  # Clockwise or Counter-clockwise\par
\par
def convex_hull_brute_force(points):\par
    n = len(points)\par
    if n < 3:\par
        return points\par
    hull = []\par
    for i in range(n):\par
        for j in range(n):\par
            if i == j:\par
                continue\par
            valid = True\par
            for k in range(n):\par
                if k == i or k == j:\par
                    continue\par
                if orientation(points[i], points[j], points[k]) != 2:\par
                    valid = False\par
                    break\par
            if valid:\par
                hull.append(points[i])\par
                break\par
    return hull\par
\par
# Input\par
points = [(10, 0), (11, 5), (5, 3), (9, 3.5), (15, 3), (12.5, 7), (6, 6.5), (7.5, 4.5)]\par
hull = convex_hull_brute_force(points)\par
\par
# Output\par
print("Convex Hull:", hull)\par
output:\par
Convex Hull: [(5, 3), (9, 3.5), (12.5, 7), (15, 3), (6, 6.5), (10, 0)]\par
\par
3.import itertools\par
import math\par
\par
def distance(city1, city2):\par
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)\par
\par
def tsp(cities):\par
    n = len(cities)\par
    min_distance = float('inf')\par
    shortest_path = None\par
    for perm in itertools.permutations(range(1, n)):\par
        total_distance = 0\par
        current_city = 0\par
        for city in perm:\par
            total_distance += distance(cities[current_city], cities[city])\par
            current_city = city\par
        total_distance += distance(cities[current_city], cities[0])\par
        if total_distance < min_distance:\par
            min_distance = total_distance\par
            shortest_path = [0] + list(perm) + [0]\par
    return min_distance, [cities[i] for i in shortest_path]\par
\par
# Test Case 1\par
cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]\par
distance1, path1 = tsp(cities1)\par
print("Test Case 1:")\par
print("Shortest Distance:", distance1)\par
print("Shortest Path:", path1)\par
\par
# Test Case 2\par
cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]\par
distance2, path2 = tsp(cities2)\par
print("Test Case 2:")\par
print("Shortest Distance:", distance2)\par
print("Shortest Path:", path2)\par
output:\par
Test Case 1:\par
Shortest Distance: 7.0710678118654755\par
Shortest Path: [(1, 2), (4, 5), (7, 1), (3, 6), (1, 2)]\par
\par
Test Case 2:\par
Shortest Distance: 14.142135623730951\par
Shortest Path: [(2, 4), (1, 7), (6, 3), (5, 9), (8, 1), (2, 4)]\par
\par
4.import itertools\par
\par
def total_cost(assignment, cost_matrix):\par
    return sum(cost_matrix[i][j] for i, j in enumerate(assignment))\par
\par
def assignment_problem(cost_matrix):\par
    n = len(cost_matrix)\par
    min_cost = float('inf')\par
    best_assignment = None\par
    for perm in itertools.permutations(range(n)):\par
        cost = total_cost(perm, cost_matrix)\par
        if cost < min_cost:\par
            min_cost = cost\par
            best_assignment = perm\par
    return [(i + 1, j + 1) for i, j in enumerate(best_assignment)], min_cost\par
\par
# Test Case 1\par
cost_matrix1 = [[3, 10, 7], [8, 5, 12], [4, 6, 9]]\par
assignment1, cost1 = assignment_problem(cost_matrix1)\par
print("Test Case 1:")\par
print("Optimal Assignment:", assignment1)\par
print("Total Cost:", cost1)\par
\par
# Test Case 2\par
cost_matrix2 = [[15, 9, 4], [8, 7, 18], [6, 12, 11]]\par
assignment2, cost2 = assignment_problem(cost_matrix2)\par
print("Test Case 2:")\par
print("Optimal Assignment:", assignment2)\par
print("Total Cost:", cost2)\par
output:\par
Test Case 1:\par
Optimal Assignment: [(1, 2), (2, 1), (3, 3)]\par
Total Cost: 19\par
\par
Test Case 2:\par
Optimal Assignment: [(1, 3), (2, 1), (3, 2)]\par
Total Cost: 24\par
\par
5.def total_value(items, values):\par
    return sum(values[i] for i in items)\par
\par
def is_feasible(items, weights, capacity):\par
    return sum(weights[i] for i in items) <= capacity\par
\par
def knapsack_brute_force(weights, values, capacity):\par
    n = len(weights)\par
    max_value = 0\par
    best_selection = []\par
    for r in range(1, n + 1):\par
        for items in itertools.combinations(range(n), r):\par
            if is_feasible(items, weights, capacity):\par
                value = total_value(items, values)\par
                if value > max_value:\par
                    max_value = value\par
                    best_selection = items\par
    return list(best_selection), max_value\par
\par
# Test Case 1\par
weights1 = [2, 3, 1]\par
values1 = [4, 5, 3]\par
capacity1 = 4\par
selection1, value1 = knapsack_brute_force(weights1, values1, capacity1)\par
print("Test Case 1:")\par
print("Optimal Selection:", selection1)\par
print("Total Value:", value1)\par
\par
# Test Case 2\par
weights2 = [1, 2, 3, 4]\par
values2 = [2, 4, 6, 3]\par
capacity2 = 6\par
selection2, value2 = knapsack_brute_force(weights2, values2, capacity2)\par
print("Test Case 2:")\par
print("Optimal Selection:", selection2)\par
print("Total Value:", value2)\par
output:\par
Test Case 1:\par
Optimal Selection: [0, 2]\par
Total Value: 7\par
\par
Test Case 2:\par
Optimal Selection: [0, 1, 2]\par
Total Value: 10\par
output:\par
Test Case 1:\par
Optimal Selection: [0, 2]\par
Total Value: 7\par
\par
Test Case 2:\par
Optimal Selection: [0, 1, 2]\par
Total Value: 10\par
\par
6.import math\par
\par
# Function to calculate Euclidean distance between two points\par
def euclidean_distance(p1, p2):\par
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\par
\par
# Function to find the closest pair of points using brute force\par
def closest_pair_brute_force(points):\par
    n = len(points)\par
    min_distance = float('inf')\par
    closest_pair = None\par
\par
    # Iterate through all pairs of points\par
    for i in range(n):\par
        for j in range(i + 1, n):\par
            distance = euclidean_distance(points[i], points[j])\par
            if distance < min_distance:\par
                min_distance = distance\par
                closest_pair = (points[i], points[j])\par
\par
    return closest_pair, min_distance\par
\par
# Test Case\par
points = [(1, 2), (4, 5), (7, 8), (3, 1)]\par
closest_pair, min_distance = closest_pair_brute_force(points)\par
\par
# Output\par
print("Closest pair:", closest_pair)\par
print("Minimum distance:", min_distance)\par
output:\par
Closest pair: ((1, 2), (3, 1))\par
Minimum distance: 1.4142135623730951\par
}
