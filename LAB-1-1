# CSA0639-DAAdef findPathsRecursive(m, n, N, i, j, memo=None):
    if memo is None:
        memo = {}

    # If out of bounds, count as one valid path
    if i < 0 or i >= m or j < 0 or j >= n:
        return 1
    
    # If no moves left, return 0
    if N == 0:
        return 0

    # Check if result is already computed
    if (i, j, N) in memo:
        return memo[(i, j, N)]

    # Move in all 4 directions
    paths = (findPathsRecursive(m, n, N - 1, i + 1, j, memo) +
             findPathsRecursive(m, n, N - 1, i - 1, j, memo) +
             findPathsRecursive(m, n, N - 1, i, j + 1, memo) +
             findPathsRecursive(m, n, N - 1, i, j - 1, memo))

    # Store result in memoization table
    memo[(i, j, N)] = paths
    return paths


def findPathsIterative(m, n, N, i, j):
    MOD = 10**9 + 7
    dp = [[[0] * n for _ in range(m)] for _ in range(N+1)]
    
    # Iterate over all steps
    for steps in range(1, N+1):
        for r in range(m):
            for c in range(n):
                # Check four possible moves
                dp[steps][r][c] = (
                    (dp[steps-1][r-1][c] if r > 0 else 1) +
                    (dp[steps-1][r+1][c] if r < m-1 else 1) +
                    (dp[steps-1][r][c-1] if c > 0 else 1) +
                    (dp[steps-1][r][c+1] if c < n-1 else 1)
                ) % MOD
    
    return dp[N][i][j]


# Choose which method to run
def findPaths(m, n, N, i, j, method="iterative"):
    if method == "recursive":
        return findPathsRecursive(m, n, N, i, j)
    elif method == "iterative":
        return findPathsIterative(m, n, N, i, j)
    else:
        raise ValueError("Invalid method. Choose 'recursive' or 'iterative'.")


# Test cases
print("Using Recursive DP:")
print(findPaths(2, 2, 2, 0, 0, method="recursive"))  # Output: 6
print(findPaths(1, 3, 3, 0, 1, method="recursive"))  # Output: 12

print("\nUsing Iterative DP:")
print(findPaths(2, 2, 2, 0, 0, method="iterative"))  # Output: 6
print(findPaths(1, 3, 3, 0, 1, method="iterative"))  # Output: 12
